Pagination-bootstrap

                                   ASM
yêu cầu btap:
ra đc giỏ hàng, tổng tiền , trong tháng cso kahsch ahngf anof mua nhìu nhất
xm đc thông tin, cập nhập giỏ hàng,....
- push: upload - git 
                 git commit
                 git push
- pull: download - git pull

- lm nhìu máy
  + git branch -m student1
  sửa code
tr>td*4

cd C:\

C:\>symfony new myfirstsymfony --full -> enter

open vscode -> add folder to workspace -> open in intergrated termiral
powershell -> commead prompt -> set deafault
C:\worspace\webg301-gch1002>symfony new web1 -- full

các cách:
1. symfony new project_name -- full
2. symfony new project_name -- webapp
3. composer create_project symfony/website-skeleton project_name
cd project_name -> symfony server: start
127.0.0.1:800   -> symfony serve 
symfony new project_name -- full --version=5.3

php bin/console xxxxxx


chính:
config
public (resourses)
src -> controller (C)
    -> entiky (Model_M)
    -> repository
env
templates (View_V)

C:\workspace\webg301-gch1002>symfony new --full crud
C:\workspace\webg301-gch1002>cd crud

cài php namespace resolver trong VSCode




- tạo 1 entity mới: laptop
với các thuộc tính: name (string),
brand (string), image (string), quantity(integer),
price (float), best_seller (boolean), date (date)
-- add dữ liệu tự động bằng fixture
-- sinh ra code CRUD tự động (CRUD: create/read/update/delete)
-- chỉnh sửa giao diện bằng Bootstrap
SQL: insert/select/update/delete
REST: Post/get/put/delete
 muốn mở terminal t ấn vào webg301 r open in inter
 tạo demo1: symfony new demo1 --full --version=5.3 --...
vào democontroller
class democontroller extends AbstractController
{
   // render ra trang homepage
   // đường dẫn file view: templates/demo/index.html
   #[Router('/', name: 'homepage')]
   public function homePage (or index)() {
        return $this -> render("demo/index.html");
   }
   #[Router('/greenwich', name: 'greeenwich')]
   public function greeenwich () {
        return $this -> render("demo/greenwich.html");
   }
}

 ấn vào demo tạo file index.html
html enter : có câu lệnh
<head>
     <style>
        h1 {
             color: red;
           }
        h2
           {
             color: blue;
           }
        body {
             background-color: aquamarine;
             }
     </style>
<body>
     <h1>Hello everyone !</h1>
     <h2>Welcoe to my Symfony website</h2>
</body>


tạo 1 file trong demo là greenwich.html
cách 1:
<Style>
      h1 {
            text-align: center;
     }
<body>
      <h1> 
      <img src="link ảnh">
      </h1>
</body>

cách 2: democontroller -> greenwich

<head>
      <!--bootstrap-->
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-betal/dist/css/bootstrap.min.css" rel="stylesheet" integrity 
       <title>Greenwich university</title>
      <style>
           a {
             text-decoration: none;
             }
           a:hover{
             color: red;
             text-decoration: underline;
                }
          img {
            border-radivs: 50%
                }
</head>
<body>
<div class="contrainer-fluid col-8 mt-3 text-center">  
    <a herf="https://cms.greenwich.edu.vn/">
    <img src=" link ảnh>
    </a>
    <A HERF="HTTPS://www.facebook.com/greewichvietnam/"
    onclick="return confirm('do you want to acces greenwich fanpage?');"
    >
    <h3>greenwich vietname fanpage</h3>
   <table class="table table-primary mt-4">
       <tr>( tr*th4)
          <th>No.</th>
          <th>Major.</th>
           <th>Quantity.</th>
           <th>Image.</th>
       </tr>
       <tr>
          <td>1</td>
          <td>Information technology</td>
          <td>500</td>
      <tr>
       <tr>
          <td>2</td>
          <td>Graphic design</td>
          <td>700</td>
      <tr> 
    </table>
   </div>


#[Route('/demo1', name: 'demo1')
public function demo1() {
   // tạo và gửi dữ liệu sang front-end
   $university = "university of greenwich (vietnam)";
   $address = "2 pham van bach - cau giay - ha noi";
   $majors = array("information technology", "business", "graphic design");
                   
   return $this -> render("demo1/demo1.html.twig"
    {
       'university' or 'uni' => $university,
       'address' or 'add' => $address,
       'major' =>$majors
    }
)
tạo file demo1.html.twig  trong demo thuộc templates

ctrl + shift + p tìm settings.json
rồi code
 "emet.includelanguages": {

demo1.html.twig:
<body>
    {# nhận và hiển thị dữ liệu được gửi từ back-end #}
 <center>
    <a herf="{{path('homepage')}}">
       back to homepage
    </a>
    <h1> university name: ({uni}) </h1>
    <h2><i> university address : ({add}) </i></h2>

 <table boder=1>
    <tr>
       <th>Major Number</th>
       <th>Major Name</th>
    </tr>
    {% set i =1 %}
    {% for m in major %}
    
    <tr>
       <td>({i})</td>
       <td>({m})</td>
     </tr>
    {% set i = i + 1 %}
    {% endfor %}
 </table>
 </center>   
</body>
    
 ngược lại thì sửa thêm twig ( sửa all chỗ cần sửa)
file index.html.twig
<h2></h2>
<a herf="{{path(demo1)}}">
  move to demo1 pàe
</a>

cài twig language 

#[Route('/demo2', name: 'demo2')]
  public function demo2() {
    $name = "iphone 13 pro max";
    $color = "Blue";
    $price = 1300;
    $quantity = 100;
    $in_stock = true;
    $image = "https://.. link ảnh"
    return $this -> render("demo/demo2.html.twig",
    [
      'name' => $name,
      'color' => $color,
      'price' => $price,
      'quantity' => $quantity,
      'in_stock' => $in_stock,
      'image' => $image
     ]);
   }

vào templates -> demo -> neww file: demo2.html.twig



php bin/console..... "INSERT INTO (name, quantity,....) Value("13 pro max", .... '2022/06/01')

<head>
  <!--bootstrap-->
  < link href=" lonk bootstrap"
<body>
  <div class="container col-md-6 text-center">
     <div class="col">
       <img src="{{image}}" width="150" heigh="300">
      </div>
      <div class="col">
         <h2 class="text text-pprimary">{{name}} </h1> ( css có sẵn)
         <h3 >color: {{color}} </h3>
         <h3 style="color:red;">price: {{price}} $</h3> (css thủ công)
         <h3>quantity: {{quantity}} </h3>
         <h3 style="font-style: italic;"( in nghiêng)>in_stock: {{in_stock}} </h3>
   </div>
 
</body>


Khai báo route:
kiểu mới:
#[Route('/demo2', name: 'demo2')]

kiểu cũ:
/**
*@Route("/demo", name = "demo)
*/






...>cd blog..
...>bo> composer...:*
cmt dongf 31 bor 30
>php bin/console doctrine:database:create hiện xanh đúng
>cls
>php bin/console make:entity
>title
> [string]
>
>enter
>author
>
>[255]
>enter
>
date
>date
>
>
 > php bin/console make:migrations
>php bin.console doctri bước 7

bước 8:
>cls
> composer require orm-fixtures --dev
>cls
>php bin/console make:fixxture(s)
>BlogFiture
vào datafixture r chọn blogFixture xong xóa code4
 
class BlogFixtures extends fixxture
{ 
public function load(ObjectManager): void
 {
   for ($i=1l $i<=20; $i++) {
     $blog = new Blog;
     $blog -> setAuthor("David Beckham");
     $blog -> setTitle("Blog $i);
     $blog -> setContent("David Beckman is one the most famous football player in the..")
     $blog -> setDate(\Datetime: createFromFormat('Y-M-D', '2022-02-16'));
     $manager -> persist ($blog);
}
   $manager -> flush();
}

> php bin/console doctrine:fixtures:load
 >yes xanh thì đúng

>php bin/console doctrine:sql 
>php bin/console make:controller BlogController
BlogController
cài php namespace resolver
class BlogController extends abstractConsoller
{
  private $serializerInterface;
public function __construct(serializerInterface $serializerInterface)
{
   $this -> serializerInterface = $serializerInterface;
  //select * from blog
#[Route('/', methods:['GET'], name:'view_all_blog')]
public function viewAllBlog (BlogRepository $blogRepository) {
    // lấy dữ liệu từ bảng blog trong database
    $blogs = $blogRepository -> findAll();
    // mã hóa( dữ liệu thành chuẩn json(api)
    $json = $this -> serializerInterface -> serializer($blog, 'json');
    // return 1 respone chứa dữ liệu theo chuẩn json
    return new Respone($json, 200, 
    [ 
      'content-type' => 'application'/json'
    ]);
}
  //select * from blog where id = $id
#[Route('/', methods:['GET'], name:'view_blog_by_id')]
public function viewBlogById ($id, BlogRepository $blogRepository) {

    $blog = $blogRepository -> find($id);
    // mã hóa( dữ liệu thành chuẩn json(api)
    $json = $this -> serializerInterface -> serializer($blog, 'json');
    // return 1 respone chứa dữ liệu theo format xml
    return new Respone($xml, 200( or respone:HTTP_OK,), 
    [ 
      'content-type' => 'application'/xml'
    ]);
}

D:\...> symfony 

vào postman
đăng nhập
ấn dấu +
get    mã

php bin/console make:entity
SClass
name
quantity: int
tieesp make:entity 
course
description
duration: int
SClass:ManyToOne SClass yes 
tiếp make:entity
Lecturer
name
dateofbirth:date
email
address
image
course:ManyToMany:yes
php bin/console make:migration
composer require orm-fixtures --dev

php bin/console make: controller CourseController
tiep LecturerController
tiep SClassController
php bin/console make:form
lecturesType
tiep
SCLassType Sclass
tiep
CourseType Course



design DB: xác định là DB gồm có bao nhiêu bảng(enity) và mối quan hệ giữa các entity vs nhau như nào( manytomany, manytoone, onetomany, onetoone)
=> phân công nhiệm vụ cho từng thành viên trong nhóm
- tạo project
- cấu hình DB(.env)
- tạo DB
- tạo entity relationship
Note: cần tạo các thuộc tính liên kết giữa các entity,
chỉ cần tạo liên kết giữa entity A sang entity B thì hệ thống sẽ gợi ý 
tạo
=> lieen keest 2 chieu  entity 
- tạo migration
- 


